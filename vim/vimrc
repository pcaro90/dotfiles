" ---------------------------------------------------
" Copyright (c) 2013 Pablo Caro. All Rights Reserved.
" Pablo Caro <me@pcaro.es> - http://pcaro.es/
" vimrc
" ---------------------------------------------------

" Preferences {{{1
    " Not vi compatible
        set nocompatible

    " History length
        set history=1000

    " Show typing command
        set showcmd

    " Keep a distance of 8 lines when scrolling
        set scrolloff=8

    " Autoindent the code
        set autoindent

    " Defining tab behavior: spaces instead of tab, 4 spaces width
        set expandtab
        set tabstop=4
        set softtabstop=4
        set shiftwidth=4

    " Start with every fold closed
        set foldlevelstart=0

    " Fold only with 2 levels of nesting
        set foldnestmax=2

    " Invisible characters
        set listchars=tab:>\ ,trail:~,eol:$

    " Show before wrapped lines
        set showbreak=>>>

    " Show line numbers, as well as row and column
        set number
        set ruler

    " Highlight searches (not at the beginning), and incremental searching
        set hlsearch
        nohlsearch
        set incsearch

    " Show matching brace
        set showmatch

    " Smart casing when searching (ignore case unless an uppercase is found)
        set ignorecase
        set smartcase

    " A $ sign delimits what is being changed
        set cpoptions+=$

    " Modified buffers can be put in background
        set hidden

    " Auto recharge changed files
        set autoread

    " Don't use beep nor visual bell
        set visualbell t_vb=

    " Status line in the last window
        set laststatus=2

    " The width of the text is 79 characters maximum
        set textwidth=79

    " Formatting options
        set formatoptions=
        set formatoptions+=c  " Auto-wrap comments
        set formatoptions+=r  " Insert comment leader after <CR> in insert mode
        set formatoptions+=q  " Allow formatting of comments with "gq"
        set formatoptions+=l  " Long lines are not broken in insert mode
        set formatoptions+=j  " Remove comment leader when joining, if applies

    " Backspace over autoindent, eol and start of indent.
    " same as ":set backspace=indent,eol,start"
        set backspace=2

    " Reduced timeout for mappings and key codes
        set timeoutlen=500

    " Syntax highlighting on
        syntax on

    " Default to latex instead of plain tex
        let g:tex_flavor = "latex"

" Vundle configuration {{{1
    filetype off

    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()

    " let Vundle manage Vundle
    Bundle 'gmarik/vundle'

    " repeat.vim - Enable repeating supported plugin maps with "."
    Bundle 'tpope/vim-repeat'

    " unimpaired.vim - Pairs of handy bracket mappings
    Bundle 'tpope/vim-unimpaired'

    " commentary.vim - Comment stuff
    Bundle 'tpope/vim-commentary'

    " surround.vim - quoting/parenthesizing made simple
    Bundle 'tpope/vim-surround'

    " fugitive.vim - A git wrapper so awesome, it should be illegal
    Bundle 'tpope/vim-fugitive'

    " snipMate.vim - Implements some of TextMate's snippets features
    Bundle 'MarcWeber/vim-addon-mw-utils'
    Bundle 'tomtom/tlib_vim'
    Bundle 'garbas/vim-snipmate'

    " vim-snippets - Snippets to be used with Snipmate/UltiSnip
    Bundle 'honza/vim-snippets'

    " Syntastic - Syntax cheching through external syntax checkers
    Bundle 'scrooloose/syntastic'

    " matchit - Extended % matching
    Bundle 'matchit.zip'

    " python-syntax - Python syntax highlighting
    Bundle 'hdima/python-syntax'

    " jpythonfold.vim - Python fold script
    Bundle 'pcaro90/jpythonfold.vim'

    " Jedi-vim - Awesome Python autocompletion
    Bundle 'davidhalter/jedi-vim'

    " ack.vim - Ack (better than grep!) replacement
    Bundle 'mileszs/ack.vim'

    " vim-markdown - Markdown syntax highlight for Vim editor
    Bundle 'hallison/vim-markdown'

    " DeleteTrailingWhitespace - Delete unwanted whitespace at the end of lines
    Bundle 'DeleteTrailingWhitespace'

    " delimetMate - Inserts matchend bracket, paren, brace or quote
    Bundle 'Raimondi/delimitMate'

    " LaTeX-BoX - Lightweight Toolbox for LaTeX
    Bundle 'LaTeX-Box-Team/LaTeX-Box'

    " TeX-PDF - Lightweight TeX-to-PDF development support
    Bundle 'TeX-PDF'

    " Jellybeans color scheme
    Bundle 'nanotech/jellybeans.vim'

    " molokai color scheme
    Bundle 'tomasr/molokai'

    filetype plugin indent on

" Color configuration {{{1
    set background=dark

    " Jellybeans
        if &t_Co <= 16
            let g:jellybeans_use_lowcolor_black=0
        endif
        colorscheme jellybeans

    " Molokai
        let g:molokai_original=1
        " colorscheme molokai


" Status line {{{1
    set statusline=
    set statusline+=%1*\ [%2*%2n%1*]  " Buffer number
    set statusline+=%<  " Truncate the path if needed
    set statusline+=%3*\ %f  " File name
    set statusline+=%4*%5r  " ReadOnly flag
    set statusline+=%5*\ %y  " File type
    set statusline+=%6*\ %m  " Modified flag

    set statusline+=%=  " Separation

    set statusline+=%1*\ [col\ %3*%v%1*]  " Virtual column number
    set statusline+=%1*\ [row\ %2*%l%1*/%2*%L%1*\ %p%%]  " Current/total line
    set statusline+=%1*\ [byte\ %5*%o%1*]  " Byte number in file

    hi User1 ctermfg=255 guifg=#eeeeee ctermbg=235 guibg=#262626
    hi User2 ctermfg=208 guifg=#ff8700 ctermbg=235 guibg=#262626
    hi User3 ctermfg=84 guifg=#5fff87 ctermbg=235 guibg=#262626
    hi User4 ctermfg=33 guifg=#0087ff ctermbg=235 guibg=#262626
    hi User5 ctermfg=221 guifg=#ffd75f ctermbg=235 guibg=#262626
    hi User6 ctermfg=88 guifg=#870000 ctermbg=235 guibg=#262626

" Mappings {{{1
    " Mapping leader
        let mapleader=","

    " Edit vimrc file
        nnoremap <leader>v :edit $MYVIMRC<CR>

    " Source vimrc file
        nnoremap <leader>vv :bdelete vimrc<CR>:source $MYVIMRC<CR>

    " Fast save
        nnoremap <leader>w :write<CR>

    " Allow saving of files as super user without start vim using sudo
    " http://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work
        cnoremap w!! w !sudo tee > /dev/null %

    " Inverted "go to mark" and "go to mark line"
        nnoremap ' `
        nnoremap ` '

    " Fold and unfold code
        nnoremap <Space> za
        nnoremap <leader>fa zM
        nnoremap <leader>uf zR

        nnoremap <C-j> zj
        nnoremap <C-k> zk

    " Fast moving between windows
        nnoremap <C-h> <C-w>W
        nnoremap <C-l> <C-w>w

    " Fast buffer delete
        nnoremap <C-b> :bdelete<CR>

    " List invisible characters
        nnoremap <silent> <F3> :set list!<CR>

    " Stop search highlighting
        nnoremap <silent> <F4> :nohlsearch<CR>

    " Call Make (it may change depending on the file type)
        nnoremap <F5> :make<CR>

" Plugins options and mappings {{{1
    " DeleteTrailingWhitespace
        nnoremap <leader>s :<C-u>%DeleteTrailingWhitespace<CR>
        vnoremap <leader>s :DeleteTrailingWhitespace<CR>

        let g:DeleteTrailingWhitespace = 1
        let g:DeleteTrailingWhitespace_Action = 'delete'

    " Syntastic
        nnoremap <F6> :SyntasticCheck<CR>:Errors<CR>:lfirst<CR>

        let g:syntastic_python_checkers = ['flake8', 'python']

    " commentary.vim
        nmap <leader>c gc
        nmap <leader>cc gcc

    " TeX-PDF
        let g:tex_pdf_map_keys = 0
        if has("autocmd")
            autocmd FileType tex nnoremap <buffer> <silent> <F5> :BuildTexPdf<CR>
        endif

" Extra functions {{{1
    " If buffer modified, update any 'Last modified: ' in the first 20 lines.
    " http://vim.wikia.com/wiki/Insert_current_date_or_time
    function! LastModified()
        if &modified
            let save_cursor = getpos(".")
            let n = min([20, line("$")])
            keepjumps exe '1,' . n . 's#^\(.\{,10}Last modified: \).*#\1' .
                        \ strftime('%a %b %d, %Y  %I:%M%p') . '#e'
            call histdel('search', -1)
            call setpos('.', save_cursor)
        endif
    endfunction


" Autocommands {{{1
    if has("autocmd")
        " Update last modified date
        autocmd BufWritePre * call LastModified()

        " Fold vim file using markers
        autocmd FileType vim setlocal foldmethod=marker

        " Use tabs with makefiles
        autocmd FileType make setlocal tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab

        " Formatting options:
        "   t - Auto-wrap text
        "   l - Long lines are not broken in insert mode
        autocmd FileType markdown,tex setlocal formatoptions+=t formatoptions-=l

        " Python execute
        autocmd FileType python nnoremap <buffer> <F5> :!python %<CR>

    endif
