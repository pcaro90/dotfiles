[
  {
    "context": "Workspace",
    "bindings": {
      "ctrl-1": "project_panel::ToggleFocus",
      "ctrl-2": "git_panel::ToggleFocus",
      "ctrl-3": "outline_panel::ToggleFocus",
      "ctrl-i": "assistant::ToggleFocus",
      "ctrl-escape": "terminal_panel::ToggleFocus"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      // "j k": ["workspace::SendKeystrokes", "escape"]
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      // Put key bindings here if you want them to work in normal & visual mode.
    }
  },
  {
    "context": "Editor && vim_mode == normal && !menu",
    "bindings": {
      "shift-y": ["workspace::SendKeystrokes", "y $"], // Use neovim's yank behavior: yank to end of line.

      "ctrl-l": "pane::ActivateNextItem",
      "ctrl-h": "pane::ActivatePreviousItem",

      // "Leader" key
      "space f": "editor::Format",
      "space w": "workspace::Save",
      "space c": "vim::PushToggleComments",

      // Panes
      "ctrl-i": "assistant::ToggleFocus"
    }
  },
  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "ctrl-i": "assistant::InlineAssist"
    }
  },
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Put key bindings here (in addition to the context above) if you want them to
      // work when no editor exists.
      // "space f": "file_finder::Toggle"
    }
  },
  {
    "context": "ProjectPanel",
    "bindings": {
      "ctrl-1": "workspace::ToggleLeftDock",
      "escape": "project_panel::ToggleFocus"
    }
  },
  {
    "context": "GitPanel",
    "bindings": {
      "ctrl-2": "workspace::ToggleLeftDock",
      "escape": "git_panel::ToggleFocus"
    }
  },
  {
    "context": "OutlinePanel",
    "bindings": {
      "ctrl-3": "workspace::ToggleLeftDock",
      "escape": "outline_panel::ToggleFocus"
    }
  },
  {
    "context": "TerminalPanel",
    "bindings": {
      "ctrl-escape": "workspace::ToggleBottomDock"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-escape": "workspace::ToggleBottomDock"
    }
  },
  {
    "context": "AssistantPanel > Pane > ContextEditor > Editor",
    "bindings": {
      "ctrl-i": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "Editor && edit_prediction_conflict",
    "bindings": {
      "ctrl-enter": "editor::AcceptEditPrediction" // Example of a modified keybinding
    }
  },

  // Use `alt-tab` to accept the edit prediction.
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      "alt-tab": "editor::AcceptEditPrediction"
    }
  },
  // Bind `tab` back to its original behavior.
  {
    "context": "Editor",
    "bindings": {
      "tab": "editor::Tab"
    }
  },
  {
    "context": "Editor && showing_completions",
    "bindings": {
      "tab": "editor::ComposeCompletion"
    }
  },
  {
    "context": "(VimControl && !menu) || vim_mode == replace || vim_mode == waiting",
    "bindings": {
      "tab": "vim::Tab"
    }
  },
  {
    "context": "vim_mode == literal",
    "bindings": {
      "tab": ["vim::Literal", ["tab", "\u0009"]]
    }
  }
]
